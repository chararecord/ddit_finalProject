package kr.or.ddit.prof.lectBoard.controller;

import javax.annotation.Resource;

import org.springframework.context.annotation.Bean;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.filter.HiddenHttpMethodFilter;

import kr.or.ddit.prof.lectBoard.service.LectureBoardService;
import kr.or.ddit.ui.PaginationRenderer;
import kr.or.ddit.vo.LectBoardVO;
import kr.or.ddit.vo.LectureVO;
import kr.or.ddit.vo.PagingVO;
import kr.or.ddit.vo.SearchVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * @author 민경진
 * @Since 2023. 2. 8.
 * <pre>
 *
 * ======[[개정이력(Modification Information)]]======
 *   수정일                    수정자                        수정내용
 * --------        --------    -----------------------
 * 2023. 2. 8.       민경진               생성
 *
 * Copyright (c) 2023 by DDIT All right reserved
 * </pre>
 */
@Slf4j
@RequiredArgsConstructor
@RequestMapping("/prof/lectBoard")
@Controller
public class LectureBoardController {
	
	private final LectureBoardService service;
	
	@Resource(name="bootstrapPaginationRender")
	private PaginationRenderer renderer;
	
	@Bean
	public HiddenHttpMethodFilter hiddenHttpMethodFilter(){
		return new HiddenHttpMethodFilter();
	}
	
	/**
	 * lectBoard 게시판 글 목록 출력 메소드 (selectList)
	 */
	@GetMapping("/{lectId}")
	public String lectInfoUI(
			@RequestParam(value="page", required=false, defaultValue="1") int currentPage
			, @PathVariable String lectId
			, @ModelAttribute("simpleCondition") SearchVO searchVO
			, Model model
			) {
		PagingVO<LectBoardVO> pagingVO = new PagingVO<>(10, 5);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(searchVO);
		
		service.retrieveLectBoardList(pagingVO);
		LectureVO lectInfo = service.retrieveLectInfo(lectId);
		
		model.addAttribute("lectInfo", lectInfo);
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("pagingHTML", renderer.renderPagination(pagingVO));
		return "prof/lectBoard/lectBoard";
	}
	
	/**
	 * lectBoard 게시판 글 목록 출력 메소드 (ajax)
	 */
	@GetMapping(value="/{lectId}", produces=MediaType.APPLICATION_JSON_UTF8_VALUE)
	public String lectInfoAndList(
			@RequestParam(value="page", required=false, defaultValue="1") int currentPage
			, @PathVariable String lectId
			, @ModelAttribute("simpleCondition") SearchVO searchVO
			, Model model
			) {
		PagingVO<LectBoardVO> pagingVO = new PagingVO<>(10, 5);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(searchVO);
		
		service.retrieveLectBoardList(pagingVO);
		LectureVO lectInfo = service.retrieveLectInfo(lectId);
		log.info("dataList>>>>>>>>>>>>>>{}",pagingVO.getDataList());
		model.addAttribute("lectInfo", lectInfo);
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("pagingHTML", renderer.renderPagination(pagingVO));
		
		return "jsonView";
	}
	
	@GetMapping("/ref")
	public String lectNotice() {
		return "prof/lectBoard/lectRef";
	}
}